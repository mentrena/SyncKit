(self.webpackChunkdocs_synckit=self.webpackChunkdocs_synckit||[]).push([[8707],{3905:function(e,r,a){"use strict";a.d(r,{Zo:function(){return s},kt:function(){return m}});var t=a(7294);function n(e,r,a){return r in e?Object.defineProperty(e,r,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[r]=a,e}function o(e,r){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),a.push.apply(a,t)}return a}function i(e){for(var r=1;r<arguments.length;r++){var a=null!=arguments[r]?arguments[r]:{};r%2?o(Object(a),!0).forEach((function(r){n(e,r,a[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(a,r))}))}return e}function l(e,r){if(null==e)return{};var a,t,n=function(e,r){if(null==e)return{};var a,t,n={},o=Object.keys(e);for(t=0;t<o.length;t++)a=o[t],r.indexOf(a)>=0||(n[a]=e[a]);return n}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)a=o[t],r.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var d=t.createContext({}),c=function(e){var r=t.useContext(d),a=r;return e&&(a="function"==typeof e?e(r):i(i({},r),e)),a},s=function(e){var r=c(e.components);return t.createElement(d.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},u=t.forwardRef((function(e,r){var a=e.components,n=e.mdxType,o=e.originalType,d=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=c(a),m=n,h=u["".concat(d,".").concat(m)]||u[m]||p[m]||o;return a?t.createElement(h,i(i({ref:r},s),{},{components:a})):t.createElement(h,i({ref:r},s))}));function m(e,r){var a=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var o=a.length,i=new Array(o);i[0]=u;var l={};for(var d in r)hasOwnProperty.call(r,d)&&(l[d]=r[d]);l.originalType=e,l.mdxType="string"==typeof e?e:n,i[1]=l;for(var c=2;c<o;c++)i[c]=a[c];return t.createElement.apply(null,i)}return t.createElement.apply(null,a)}u.displayName="MDXCreateElement"},1891:function(e,r,a){"use strict";a.r(r),a.d(r,{frontMatter:function(){return l},contentTitle:function(){return d},metadata:function(){return c},toc:function(){return s},default:function(){return u}});var t=a(2122),n=a(9756),o=(a(7294),a(3905)),i=["components"],l={},d="RealmAdapter",c={unversionedId:"api/realm/RealmAdapter",id:"api/realm/RealmAdapter",isDocsHomePage:!1,title:"RealmAdapter",description:"` swift",source:"@site/docs/api/realm/RealmAdapter.md",sourceDirName:"api/realm",slug:"/api/realm/RealmAdapter",permalink:"/SyncKit/api/realm/RealmAdapter",version:"current",frontMatter:{},sidebar:"API",previous:{title:"MultiRealmResultsController",permalink:"/SyncKit/api/realm/MultiRealmResultsController"},next:{title:"RealmAdapterDelegate",permalink:"/SyncKit/api/realm/RealmAdapterDelegate"}},s=[{value:"Inheritance",id:"inheritance",children:[]},{value:"Initializers",id:"initializers",children:[{value:"<code>init(persistenceRealmConfiguration:targetRealmConfiguration:recordZoneID:)</code>",id:"initpersistencerealmconfigurationtargetrealmconfigurationrecordzoneid",children:[]}]},{value:"Properties",id:"properties",children:[{value:"<code>persistenceRealmConfiguration</code>",id:"persistencerealmconfiguration",children:[]},{value:"<code>targetRealmConfiguration</code>",id:"targetrealmconfiguration",children:[]},{value:"<code>zoneID</code>",id:"zoneid",children:[]},{value:"<code>mergePolicy</code>",id:"mergepolicy",children:[]},{value:"<code>delegate</code>",id:"delegate",children:[]},{value:"<code>recordProcessingDelegate</code>",id:"recordprocessingdelegate",children:[]},{value:"<code>forceDataTypeInsteadOfAsset</code>",id:"forcedatatypeinsteadofasset",children:[]},{value:"<code>hasChanges</code>",id:"haschanges",children:[]},{value:"<code>recordZoneID</code>",id:"recordzoneid",children:[]},{value:"<code>serverChangeToken</code>",id:"serverchangetoken",children:[]}]},{value:"Methods",id:"methods",children:[{value:"<code>defaultPersistenceConfiguration()</code>",id:"defaultpersistenceconfiguration",children:[]},{value:"<code>prepareToImport()</code>",id:"preparetoimport",children:[]},{value:"<code>saveChanges(in:)</code>",id:"savechangesin",children:[]},{value:"<code>deleteRecords(with:)</code>",id:"deleterecordswith",children:[]},{value:"<code>persistImportedChanges(completion:)</code>",id:"persistimportedchangescompletion",children:[]},{value:"<code>recordsToUpload(limit:)</code>",id:"recordstouploadlimit",children:[]},{value:"<code>didUpload(savedRecords:)</code>",id:"diduploadsavedrecords",children:[]},{value:"<code>recordIDsMarkedForDeletion(limit:)</code>",id:"recordidsmarkedfordeletionlimit",children:[]},{value:"<code>didDelete(recordIDs:)</code>",id:"diddeleterecordids",children:[]},{value:"<code>hasRecordID(_:)</code>",id:"hasrecordid_",children:[]},{value:"<code>didFinishImport(with:)</code>",id:"didfinishimportwith",children:[]},{value:"<code>record(for:)</code>",id:"recordfor",children:[]},{value:"<code>share(for:)</code>",id:"sharefor",children:[]},{value:"<code>save(share:for:)</code>",id:"savesharefor",children:[]},{value:"<code>deleteShare(for:)</code>",id:"deletesharefor",children:[]},{value:"<code>deleteChangeTracking()</code>",id:"deletechangetracking",children:[]},{value:"<code>saveToken(_:)</code>",id:"savetoken_",children:[]},{value:"<code>recordsToUpdateParentRelationshipsForRoot(_:)</code>",id:"recordstoupdateparentrelationshipsforroot_",children:[]},{value:"<code>shareForRecordZone()</code>",id:"shareforrecordzone",children:[]},{value:"<code>saveShareForRecordZone(share:)</code>",id:"saveshareforrecordzoneshare",children:[]},{value:"<code>deleteShareForRecordZone()</code>",id:"deleteshareforrecordzone",children:[]}]}],p={toc:s};function u(e){var r=e.components,a=(0,n.Z)(e,i);return(0,o.kt)("wrapper",(0,t.Z)({},p,a,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"realmadapter"},"RealmAdapter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},"@objc public class RealmAdapter: NSObject, ModelAdapter \n")),(0,o.kt)("h2",{id:"inheritance"},"Inheritance"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"ModelAdapter"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"NSObject")),(0,o.kt)("h2",{id:"initializers"},"Initializers"),(0,o.kt)("h3",{id:"initpersistencerealmconfigurationtargetrealmconfigurationrecordzoneid"},(0,o.kt)("inlineCode",{parentName:"h3"},"init(persistenceRealmConfiguration:targetRealmConfiguration:recordZoneID:)")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},"@objc public init(persistenceRealmConfiguration: RLMRealmConfiguration, targetRealmConfiguration: RLMRealmConfiguration, recordZoneID: CKRecordZone.ID) \n")),(0,o.kt)("h2",{id:"properties"},"Properties"),(0,o.kt)("h3",{id:"persistencerealmconfiguration"},(0,o.kt)("inlineCode",{parentName:"h3"},"persistenceRealmConfiguration")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},"@objc public let persistenceRealmConfiguration: RLMRealmConfiguration\n")),(0,o.kt)("h3",{id:"targetrealmconfiguration"},(0,o.kt)("inlineCode",{parentName:"h3"},"targetRealmConfiguration")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},"@objc public let targetRealmConfiguration: RLMRealmConfiguration\n")),(0,o.kt)("h3",{id:"zoneid"},(0,o.kt)("inlineCode",{parentName:"h3"},"zoneID")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},"@objc public let zoneID: CKRecordZone.ID\n")),(0,o.kt)("h3",{id:"mergepolicy"},(0,o.kt)("inlineCode",{parentName:"h3"},"mergePolicy")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},"@objc public var mergePolicy: MergePolicy = .server\n")),(0,o.kt)("h3",{id:"delegate"},(0,o.kt)("inlineCode",{parentName:"h3"},"delegate")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},"@objc public var delegate: RealmAdapterDelegate?\n")),(0,o.kt)("h3",{id:"recordprocessingdelegate"},(0,o.kt)("inlineCode",{parentName:"h3"},"recordProcessingDelegate")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},"@objc public weak var recordProcessingDelegate: RealmAdapterRecordProcessing?\n")),(0,o.kt)("h3",{id:"forcedatatypeinsteadofasset"},(0,o.kt)("inlineCode",{parentName:"h3"},"forceDataTypeInsteadOfAsset")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},"@objc public var forceDataTypeInsteadOfAsset: Bool = false\n")),(0,o.kt)("h3",{id:"haschanges"},(0,o.kt)("inlineCode",{parentName:"h3"},"hasChanges")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},"@objc public private(set) var hasChanges = false\n")),(0,o.kt)("h3",{id:"recordzoneid"},(0,o.kt)("inlineCode",{parentName:"h3"},"recordZoneID")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},"public var recordZoneID: CKRecordZone.ID \n")),(0,o.kt)("h3",{id:"serverchangetoken"},(0,o.kt)("inlineCode",{parentName:"h3"},"serverChangeToken")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},"public var serverChangeToken: CKServerChangeToken? \n")),(0,o.kt)("h2",{id:"methods"},"Methods"),(0,o.kt)("h3",{id:"defaultpersistenceconfiguration"},(0,o.kt)("inlineCode",{parentName:"h3"},"defaultPersistenceConfiguration()")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},"@objc static public func defaultPersistenceConfiguration() -> RLMRealmConfiguration \n")),(0,o.kt)("h3",{id:"preparetoimport"},(0,o.kt)("inlineCode",{parentName:"h3"},"prepareToImport()")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},"public func prepareToImport() \n")),(0,o.kt)("h3",{id:"savechangesin"},(0,o.kt)("inlineCode",{parentName:"h3"},"saveChanges(in:)")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},"public func saveChanges(in records: [CKRecord]) \n")),(0,o.kt)("h3",{id:"deleterecordswith"},(0,o.kt)("inlineCode",{parentName:"h3"},"deleteRecords(with:)")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},"public func deleteRecords(with recordIDs: [CKRecord.ID]) \n")),(0,o.kt)("h3",{id:"persistimportedchangescompletion"},(0,o.kt)("inlineCode",{parentName:"h3"},"persistImportedChanges(completion:)")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},"public func persistImportedChanges(completion: @escaping ((Error?) -> Void)) \n")),(0,o.kt)("h3",{id:"recordstouploadlimit"},(0,o.kt)("inlineCode",{parentName:"h3"},"recordsToUpload(limit:)")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},"public func recordsToUpload(limit: Int) -> [CKRecord] \n")),(0,o.kt)("h3",{id:"diduploadsavedrecords"},(0,o.kt)("inlineCode",{parentName:"h3"},"didUpload(savedRecords:)")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},"public func didUpload(savedRecords: [CKRecord]) \n")),(0,o.kt)("h3",{id:"recordidsmarkedfordeletionlimit"},(0,o.kt)("inlineCode",{parentName:"h3"},"recordIDsMarkedForDeletion(limit:)")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},"public func recordIDsMarkedForDeletion(limit: Int) -> [CKRecord.ID] \n")),(0,o.kt)("h3",{id:"diddeleterecordids"},(0,o.kt)("inlineCode",{parentName:"h3"},"didDelete(recordIDs:)")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},"public func didDelete(recordIDs deletedRecordIDs: [CKRecord.ID]) \n")),(0,o.kt)("h3",{id:"hasrecordid_"},(0,o.kt)("inlineCode",{parentName:"h3"},"hasRecordID(_:)")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},"public func hasRecordID(_ recordID: CKRecord.ID) -> Bool \n")),(0,o.kt)("h3",{id:"didfinishimportwith"},(0,o.kt)("inlineCode",{parentName:"h3"},"didFinishImport(with:)")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},"public func didFinishImport(with error: Error?) \n")),(0,o.kt)("h3",{id:"recordfor"},(0,o.kt)("inlineCode",{parentName:"h3"},"record(for:)")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},"public func record(for object: AnyObject) -> CKRecord? \n")),(0,o.kt)("h3",{id:"sharefor"},(0,o.kt)("inlineCode",{parentName:"h3"},"share(for:)")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},"public func share(for object: AnyObject) -> CKShare? \n")),(0,o.kt)("h3",{id:"savesharefor"},(0,o.kt)("inlineCode",{parentName:"h3"},"save(share:for:)")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},"public func save(share: CKShare, for object: AnyObject) \n")),(0,o.kt)("h3",{id:"deletesharefor"},(0,o.kt)("inlineCode",{parentName:"h3"},"deleteShare(for:)")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},"public func deleteShare(for object: AnyObject) \n")),(0,o.kt)("h3",{id:"deletechangetracking"},(0,o.kt)("inlineCode",{parentName:"h3"},"deleteChangeTracking()")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},"public func deleteChangeTracking() \n")),(0,o.kt)("h3",{id:"savetoken_"},(0,o.kt)("inlineCode",{parentName:"h3"},"saveToken(_:)")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},"public func saveToken(_ token: CKServerChangeToken?) \n")),(0,o.kt)("h3",{id:"recordstoupdateparentrelationshipsforroot_"},(0,o.kt)("inlineCode",{parentName:"h3"},"recordsToUpdateParentRelationshipsForRoot(_:)")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},"public func recordsToUpdateParentRelationshipsForRoot(_ object: AnyObject) -> [CKRecord] \n")),(0,o.kt)("h3",{id:"shareforrecordzone"},(0,o.kt)("inlineCode",{parentName:"h3"},"shareForRecordZone()")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},"@available(iOS 15.0, OSX 12, *)\n    public func shareForRecordZone() -> CKShare? \n")),(0,o.kt)("h3",{id:"saveshareforrecordzoneshare"},(0,o.kt)("inlineCode",{parentName:"h3"},"saveShareForRecordZone(share:)")),(0,o.kt)("p",null,"Store CKShare for the record zone."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},"@available(iOS 15.0, OSX 12, *)\n    public func saveShareForRecordZone(share: CKShare) \n")),(0,o.kt)("h4",{id:"parameters"},"Parameters"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"share: ",(0,o.kt)("inlineCode",{parentName:"li"},"CKShare")," object to save.")),(0,o.kt)("h3",{id:"deleteshareforrecordzone"},(0,o.kt)("inlineCode",{parentName:"h3"},"deleteShareForRecordZone()")),(0,o.kt)("p",null,"Delete existing ",(0,o.kt)("inlineCode",{parentName:"p"},"CKShare")," for adapter's record zone."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},"@available(iOS 15.0, OSX 12, *)\n    public func deleteShareForRecordZone() \n")))}u.isMDXComponent=!0}}]);