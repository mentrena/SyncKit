(self.webpackChunkdocs_synckit=self.webpackChunkdocs_synckit||[]).push([[1372],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return y}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=u(n),y=o,f=d["".concat(l,".").concat(y)]||d[y]||s[y]||a;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function y(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var u=2;u<a;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3099:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return l},metadata:function(){return u},toc:function(){return p},default:function(){return d}});var r=n(2122),o=n(9756),a=(n(7294),n(3905)),i=["components"],c={id:"overview",title:"Overview"},l="Overview",u={unversionedId:"overview",id:"overview",isDocsHomePage:!1,title:"Overview",description:"In most cases you just need to create a CloudKitSynchronizer instance using the convenience initializer for the model technology that your app uses. In a Core Data app you would do:",source:"@site/docs/overview.md",sourceDirName:".",slug:"/overview",permalink:"/SyncKit/overview",version:"current",frontMatter:{id:"overview",title:"Overview"},sidebar:"docs",previous:{title:"Example app",permalink:"/SyncKit/example"},next:{title:"SyncKit for Core Data",permalink:"/SyncKit/coredata"}},p=[{value:"Your model",id:"your-model",children:[]}],s={toc:p};function d(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"overview"},"Overview"),(0,a.kt)("p",null,"In most cases you just need to create a ",(0,a.kt)("inlineCode",{parentName:"p"},"CloudKitSynchronizer")," instance using the convenience initializer for the model technology that your app uses. In a Core Data app you would do:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'let synchronizer = \n  CloudKitSynchronizer.privateSynchronizer(containerName: "your-iCloud-container", \n                                           managedObjectContext: self.managedObjectContext)\n')),(0,a.kt)("p",null,"And in a Realm app you would use:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'let synchronizer = \n  CloudKitSynchronizer.privateSynchronizer(containerName: "your-iCloud-container", \n                                           configuration: self.realmConfiguration)\n')),(0,a.kt)("p",null,"Internally, SyncKit will configure a model adapter for your model to track any changes that need to be sent to iCloud. Then you would simply call ",(0,a.kt)("inlineCode",{parentName:"p"},"synchronize")," to trigger a CloudKit sync."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},"synchronizer.synchronize { error in\n\n}\n")),(0,a.kt)("p",null,"And that's it. Some further configuration might be needed for your technology, so do check the ",(0,a.kt)("a",{parentName:"p",href:"/SyncKit/coredata"},"Core Data")," and ",(0,a.kt)("a",{parentName:"p",href:"/SyncKit/realm"},"Realm")," sections."),(0,a.kt)("h2",{id:"your-model"},"Your model"),(0,a.kt)("p",null,"SyncKit observes your data model and keeps track of local changes so they can be uploaded using CloudKit when you trigger a synchronization.\nConversely, when you synchronize data SyncKit will fetch new records from CloudKit and apply those changes to your local model."),(0,a.kt)("p",null,"Because your data will be uploaded in the form of multiple ",(0,a.kt)("inlineCode",{parentName:"p"},"CKRecord"),", your properties should be of any type that conforms to ",(0,a.kt)("a",{parentName:"p",href:"https://developer.apple.com/documentation/cloudkit/ckrecordvalueprotocol"},"CKRecordValueProtocol"),", that is, for attribute fields they can be of any of these types:\nArray,\nBool,\nCLLocation,\nData,\nDate,\nDouble,\nFloat,\nInt,\nInt16,\nInt32,\nInt64,\nInt8,\nNSArray,\nNSData,\nNSDate,\nNSNumber,\nNSString,\nString,\nUInt,\nUInt16,\nUInt32,\nUInt64,\nUInt8"),(0,a.kt)("p",null,"Relationship fields should be an instance of another object in your model."),(0,a.kt)("p",null,"Note that ",(0,a.kt)("inlineCode",{parentName:"p"},"Data")," fields are uploaded as ",(0,a.kt)("inlineCode",{parentName:"p"},"CKAsset")," by default, unless you explicitly force them to be uploaded as Data using the ",(0,a.kt)("inlineCode",{parentName:"p"},"forceDataTypeInsteadOfAsset")," ",(0,a.kt)("a",{parentName:"p",href:"/SyncKit/api/coredata/CoreDataAdapter#forcedatatypeinsteadofasset"},"option"),"."),(0,a.kt)("p",null,"If you want to use some other property type, it might be possible to do so by using ",(0,a.kt)("a",{parentName:"p",href:"/SyncKit/configuration/#custom-record-processing"},"custom record processing")),(0,a.kt)("p",null,"If using Core Data, your property can also be defined as ",(0,a.kt)("inlineCode",{parentName:"p"},"Transformable"),", and SyncKit will use your ValueTransformer to upload it as ",(0,a.kt)("inlineCode",{parentName:"p"},"Data"),". However, although this works for now, it is recommended that you adopt ",(0,a.kt)("a",{parentName:"p",href:"/SyncKit/configuration/#custom-record-processing"},"custom record processing")," and add your own code to convert the property to a ",(0,a.kt)("inlineCode",{parentName:"p"},"CKRecordValueProtocol"),". SyncKit might drop out-of-the-box support for transformable properties in the future."))}d.isMDXComponent=!0}}]);