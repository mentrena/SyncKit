(self.webpackChunkdocs_synckit=self.webpackChunkdocs_synckit||[]).push([[9709],{3905:function(e,r,t){"use strict";t.d(r,{Zo:function(){return s},kt:function(){return m}});var a=t(7294);function n(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);r&&(a=a.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){n(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,a,n=function(e,r){if(null==e)return{};var t,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],r.indexOf(t)>=0||(n[t]=e[t]);return n}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var d=a.createContext({}),c=function(e){var r=a.useContext(d),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},s=function(e){var r=c(e.components);return a.createElement(d.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return a.createElement(a.Fragment,{},r)}},u=a.forwardRef((function(e,r){var t=e.components,n=e.mdxType,i=e.originalType,d=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=c(t),m=n,h=u["".concat(d,".").concat(m)]||u[m]||p[m]||i;return t?a.createElement(h,o(o({ref:r},s),{},{components:t})):a.createElement(h,o({ref:r},s))}));function m(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var i=t.length,o=new Array(i);o[0]=u;var l={};for(var d in r)hasOwnProperty.call(r,d)&&(l[d]=r[d]);l.originalType=e,l.mdxType="string"==typeof e?e:n,o[1]=l;for(var c=2;c<i;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},9411:function(e,r,t){"use strict";t.r(r),t.d(r,{frontMatter:function(){return l},contentTitle:function(){return d},metadata:function(){return c},toc:function(){return s},default:function(){return u}});var a=t(2122),n=t(9756),i=(t(7294),t(3905)),o=["components"],l={},d="RealmSwiftAdapter",c={unversionedId:"api/realmswift/RealmSwiftAdapter",id:"api/realmswift/RealmSwiftAdapter",isDocsHomePage:!1,title:"RealmSwiftAdapter",description:"` swift",source:"@site/docs/api/realmswift/RealmSwiftAdapter.md",sourceDirName:"api/realmswift",slug:"/api/realmswift/RealmSwiftAdapter",permalink:"/SyncKit/api/realmswift/RealmSwiftAdapter",version:"current",frontMatter:{},sidebar:"API",previous:{title:"MultiRealmResultsController",permalink:"/SyncKit/api/realmswift/MultiRealmResultsController"},next:{title:"RealmSwiftAdapterDelegate",permalink:"/SyncKit/api/realmswift/RealmSwiftAdapterDelegate"}},s=[{value:"Inheritance",id:"inheritance",children:[]},{value:"Initializers",id:"initializers",children:[{value:"<code>init(persistenceRealmConfiguration:targetRealmConfiguration:recordZoneID:)</code>",id:"initpersistencerealmconfigurationtargetrealmconfigurationrecordzoneid",children:[]}]},{value:"Properties",id:"properties",children:[{value:"<code>persistenceRealmConfiguration</code>",id:"persistencerealmconfiguration",children:[]},{value:"<code>targetRealmConfiguration</code>",id:"targetrealmconfiguration",children:[]},{value:"<code>zoneID</code>",id:"zoneid",children:[]},{value:"<code>mergePolicy</code>",id:"mergepolicy",children:[]},{value:"<code>delegate</code>",id:"delegate",children:[]},{value:"<code>recordProcessingDelegate</code>",id:"recordprocessingdelegate",children:[]},{value:"<code>forceDataTypeInsteadOfAsset</code>",id:"forcedatatypeinsteadofasset",children:[]},{value:"<code>hasChanges</code>",id:"haschanges",children:[]},{value:"<code>recordZoneID</code>",id:"recordzoneid",children:[]},{value:"<code>serverChangeToken</code>",id:"serverchangetoken",children:[]}]},{value:"Methods",id:"methods",children:[{value:"<code>defaultPersistenceConfiguration()</code>",id:"defaultpersistenceconfiguration",children:[]},{value:"<code>prepareToImport()</code>",id:"preparetoimport",children:[]},{value:"<code>saveChanges(in:)</code>",id:"savechangesin",children:[]},{value:"<code>deleteRecords(with:)</code>",id:"deleterecordswith",children:[]},{value:"<code>persistImportedChanges(completion:)</code>",id:"persistimportedchangescompletion",children:[]},{value:"<code>recordsToUpload(limit:)</code>",id:"recordstouploadlimit",children:[]},{value:"<code>didUpload(savedRecords:)</code>",id:"diduploadsavedrecords",children:[]},{value:"<code>recordIDsMarkedForDeletion(limit:)</code>",id:"recordidsmarkedfordeletionlimit",children:[]},{value:"<code>didDelete(recordIDs:)</code>",id:"diddeleterecordids",children:[]},{value:"<code>hasRecordID(_:)</code>",id:"hasrecordid_",children:[]},{value:"<code>didFinishImport(with:)</code>",id:"didfinishimportwith",children:[]},{value:"<code>record(for:)</code>",id:"recordfor",children:[]},{value:"<code>share(for:)</code>",id:"sharefor",children:[]},{value:"<code>save(share:for:)</code>",id:"savesharefor",children:[]},{value:"<code>deleteShare(for:)</code>",id:"deletesharefor",children:[]},{value:"<code>deleteChangeTracking()</code>",id:"deletechangetracking",children:[]},{value:"<code>saveToken(_:)</code>",id:"savetoken_",children:[]},{value:"<code>recordsToUpdateParentRelationshipsForRoot(_:)</code>",id:"recordstoupdateparentrelationshipsforroot_",children:[]},{value:"<code>shareForRecordZone()</code>",id:"shareforrecordzone",children:[]},{value:"<code>saveShareForRecordZone(share:)</code>",id:"saveshareforrecordzoneshare",children:[]},{value:"<code>deleteShareForRecordZone()</code>",id:"deleteshareforrecordzone",children:[]}]}],p={toc:s};function u(e){var r=e.components,t=(0,n.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"realmswiftadapter"},"RealmSwiftAdapter"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"public class RealmSwiftAdapter: NSObject, ModelAdapter \n")),(0,i.kt)("h2",{id:"inheritance"},"Inheritance"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ModelAdapter"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"NSObject")),(0,i.kt)("h2",{id:"initializers"},"Initializers"),(0,i.kt)("h3",{id:"initpersistencerealmconfigurationtargetrealmconfigurationrecordzoneid"},(0,i.kt)("inlineCode",{parentName:"h3"},"init(persistenceRealmConfiguration:targetRealmConfiguration:recordZoneID:)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"public init(persistenceRealmConfiguration: Realm.Configuration, targetRealmConfiguration: Realm.Configuration, recordZoneID: CKRecordZone.ID) \n")),(0,i.kt)("h2",{id:"properties"},"Properties"),(0,i.kt)("h3",{id:"persistencerealmconfiguration"},(0,i.kt)("inlineCode",{parentName:"h3"},"persistenceRealmConfiguration")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"public let persistenceRealmConfiguration: Realm.Configuration\n")),(0,i.kt)("h3",{id:"targetrealmconfiguration"},(0,i.kt)("inlineCode",{parentName:"h3"},"targetRealmConfiguration")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"public let targetRealmConfiguration: Realm.Configuration\n")),(0,i.kt)("h3",{id:"zoneid"},(0,i.kt)("inlineCode",{parentName:"h3"},"zoneID")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"public let zoneID: CKRecordZone.ID\n")),(0,i.kt)("h3",{id:"mergepolicy"},(0,i.kt)("inlineCode",{parentName:"h3"},"mergePolicy")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"public var mergePolicy: MergePolicy = .server\n")),(0,i.kt)("h3",{id:"delegate"},(0,i.kt)("inlineCode",{parentName:"h3"},"delegate")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"public weak var delegate: RealmSwiftAdapterDelegate?\n")),(0,i.kt)("h3",{id:"recordprocessingdelegate"},(0,i.kt)("inlineCode",{parentName:"h3"},"recordProcessingDelegate")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"public weak var recordProcessingDelegate: RealmSwiftAdapterRecordProcessing?\n")),(0,i.kt)("h3",{id:"forcedatatypeinsteadofasset"},(0,i.kt)("inlineCode",{parentName:"h3"},"forceDataTypeInsteadOfAsset")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"public var forceDataTypeInsteadOfAsset: Bool = false\n")),(0,i.kt)("h3",{id:"haschanges"},(0,i.kt)("inlineCode",{parentName:"h3"},"hasChanges")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"public private(set) var hasChanges = false\n")),(0,i.kt)("h3",{id:"recordzoneid"},(0,i.kt)("inlineCode",{parentName:"h3"},"recordZoneID")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"public var recordZoneID: CKRecordZone.ID \n")),(0,i.kt)("h3",{id:"serverchangetoken"},(0,i.kt)("inlineCode",{parentName:"h3"},"serverChangeToken")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"public var serverChangeToken: CKServerChangeToken? \n")),(0,i.kt)("h2",{id:"methods"},"Methods"),(0,i.kt)("h3",{id:"defaultpersistenceconfiguration"},(0,i.kt)("inlineCode",{parentName:"h3"},"defaultPersistenceConfiguration()")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"static public func defaultPersistenceConfiguration() -> Realm.Configuration \n")),(0,i.kt)("h3",{id:"preparetoimport"},(0,i.kt)("inlineCode",{parentName:"h3"},"prepareToImport()")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"public func prepareToImport() \n")),(0,i.kt)("h3",{id:"savechangesin"},(0,i.kt)("inlineCode",{parentName:"h3"},"saveChanges(in:)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"public func saveChanges(in records: [CKRecord]) \n")),(0,i.kt)("h3",{id:"deleterecordswith"},(0,i.kt)("inlineCode",{parentName:"h3"},"deleteRecords(with:)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"public func deleteRecords(with recordIDs: [CKRecord.ID]) \n")),(0,i.kt)("h3",{id:"persistimportedchangescompletion"},(0,i.kt)("inlineCode",{parentName:"h3"},"persistImportedChanges(completion:)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"public func persistImportedChanges(completion: @escaping ((Error?) -> Void)) \n")),(0,i.kt)("h3",{id:"recordstouploadlimit"},(0,i.kt)("inlineCode",{parentName:"h3"},"recordsToUpload(limit:)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"public func recordsToUpload(limit: Int) -> [CKRecord] \n")),(0,i.kt)("h3",{id:"diduploadsavedrecords"},(0,i.kt)("inlineCode",{parentName:"h3"},"didUpload(savedRecords:)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"public func didUpload(savedRecords: [CKRecord]) \n")),(0,i.kt)("h3",{id:"recordidsmarkedfordeletionlimit"},(0,i.kt)("inlineCode",{parentName:"h3"},"recordIDsMarkedForDeletion(limit:)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"public func recordIDsMarkedForDeletion(limit: Int) -> [CKRecord.ID] \n")),(0,i.kt)("h3",{id:"diddeleterecordids"},(0,i.kt)("inlineCode",{parentName:"h3"},"didDelete(recordIDs:)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"public func didDelete(recordIDs deletedRecordIDs: [CKRecord.ID]) \n")),(0,i.kt)("h3",{id:"hasrecordid_"},(0,i.kt)("inlineCode",{parentName:"h3"},"hasRecordID(_:)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"public func hasRecordID(_ recordID: CKRecord.ID) -> Bool \n")),(0,i.kt)("h3",{id:"didfinishimportwith"},(0,i.kt)("inlineCode",{parentName:"h3"},"didFinishImport(with:)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"public func didFinishImport(with error: Error?) \n")),(0,i.kt)("h3",{id:"recordfor"},(0,i.kt)("inlineCode",{parentName:"h3"},"record(for:)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"public func record(for object: AnyObject) -> CKRecord? \n")),(0,i.kt)("h3",{id:"sharefor"},(0,i.kt)("inlineCode",{parentName:"h3"},"share(for:)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"public func share(for object: AnyObject) -> CKShare? \n")),(0,i.kt)("h3",{id:"savesharefor"},(0,i.kt)("inlineCode",{parentName:"h3"},"save(share:for:)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"public func save(share: CKShare, for object: AnyObject) \n")),(0,i.kt)("h3",{id:"deletesharefor"},(0,i.kt)("inlineCode",{parentName:"h3"},"deleteShare(for:)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"public func deleteShare(for object: AnyObject) \n")),(0,i.kt)("h3",{id:"deletechangetracking"},(0,i.kt)("inlineCode",{parentName:"h3"},"deleteChangeTracking()")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"public func deleteChangeTracking() \n")),(0,i.kt)("h3",{id:"savetoken_"},(0,i.kt)("inlineCode",{parentName:"h3"},"saveToken(_:)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"public func saveToken(_ token: CKServerChangeToken?) \n")),(0,i.kt)("h3",{id:"recordstoupdateparentrelationshipsforroot_"},(0,i.kt)("inlineCode",{parentName:"h3"},"recordsToUpdateParentRelationshipsForRoot(_:)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"public func recordsToUpdateParentRelationshipsForRoot(_ object: AnyObject) -> [CKRecord] \n")),(0,i.kt)("h3",{id:"shareforrecordzone"},(0,i.kt)("inlineCode",{parentName:"h3"},"shareForRecordZone()")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"@available(iOS 15.0, OSX 12, *)\n    public func shareForRecordZone() -> CKShare? \n")),(0,i.kt)("h3",{id:"saveshareforrecordzoneshare"},(0,i.kt)("inlineCode",{parentName:"h3"},"saveShareForRecordZone(share:)")),(0,i.kt)("p",null,"Store CKShare for the record zone."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"@available(iOS 15.0, OSX 12, *)\n    public func saveShareForRecordZone(share: CKShare) \n")),(0,i.kt)("h4",{id:"parameters"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"share: ",(0,i.kt)("inlineCode",{parentName:"li"},"CKShare")," object to save.")),(0,i.kt)("h3",{id:"deleteshareforrecordzone"},(0,i.kt)("inlineCode",{parentName:"h3"},"deleteShareForRecordZone()")),(0,i.kt)("p",null,"Delete existing ",(0,i.kt)("inlineCode",{parentName:"p"},"CKShare")," for adapter's record zone."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"@available(iOS 15.0, OSX 12, *)\n    public func deleteShareForRecordZone() \n")))}u.isMDXComponent=!0}}]);